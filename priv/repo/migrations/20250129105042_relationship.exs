defmodule Diffo.Repo.Migrations.Relationship do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:relationships, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:alias, :text)
      add(:type, :text)
      add(:reverse_type, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :source_id,
        references(:instances,
          column: :id,
          name: "relationships_source_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )

      add(
        :target_id,
        references(:instances,
          column: :id,
          name: "relationships_target_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )
    end

    create unique_index(:relationships, [:source_id, :target_id],
             name: "relationships_unique_source_and_target_index"
           )
  end

  def down do
    drop_if_exists(
      unique_index(:relationships, [:source_id, :target_id],
        name: "relationships_unique_source_and_target_index"
      )
    )

    drop(constraint(:relationships, "relationships_source_id_fkey"))

    drop(constraint(:relationships, "relationships_target_id_fkey"))

    drop(table(:relationships))
  end
end

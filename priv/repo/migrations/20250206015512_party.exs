defmodule Diffo.Repo.Migrations.Party do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:party_refs, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:role, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :instance_id,
        references(:instances,
          column: :id,
          name: "party_refs_instance_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )

      add(:party_id, :text, null: false)
    end

    create table(:parties, primary_key: false) do
      add(:id, :text, null: false, primary_key: true)
    end

    alter table(:party_refs) do
      modify(
        :party_id,
        references(:parties,
          column: :id,
          name: "party_refs_party_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create unique_index(:party_refs, [:instance_id, :party_id],
             name: "party_refs_instance_party_uniqueness_index"
           )

    alter table(:parties) do
      add(:href, :text)
      add(:name, :text)
      add(:type, :text, null: false, default: "PartyRef")
      add(:referredType, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end
  end

  def down do
    alter table(:parties) do
      remove(:updated_at)
      remove(:inserted_at)
      remove(:referredType)
      remove(:type)
      remove(:name)
      remove(:href)
    end

    drop_if_exists(
      unique_index(:party_refs, [:instance_id, :party_id],
        name: "party_refs_instance_party_uniqueness_index"
      )
    )

    drop(constraint(:party_refs, "party_refs_party_id_fkey"))

    alter table(:party_refs) do
      modify(:party_id, :text)
    end

    drop(table(:parties))

    drop(constraint(:party_refs, "party_refs_instance_id_fkey"))

    drop(table(:party_refs))
  end
end

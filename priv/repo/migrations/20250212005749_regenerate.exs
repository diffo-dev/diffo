defmodule Diffo.Repo.Migrations.Regenerate do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:specifications, primary_key: false) do
      add(:type, :text, null: false, default: "serviceSpecification")
      add(:name, :text, null: false)
      add(:major_version, :bigint, null: false, default: 1)
      add(:minor_version, :bigint, null: false, default: 0)
      add(:patch_version, :bigint, null: false, default: 0)
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:description, :text)
      add(:category, :text)
      add(:tmf_version, :bigint, null: false, default: 4)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:specifications, [:name, :major_version],
             name: "specifications_unique_major_version_per_name_index"
           )

    create table(:relationships, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:alias, :text)
      add(:type, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:source_id, :uuid, null: false)
      add(:target_id, :uuid, null: false)
    end

    create table(:places, primary_key: false) do
      add(:id, :text, null: false, primary_key: true)
      add(:href, :text)
      add(:name, :text)
      add(:type, :text, null: false, default: "PlaceRef")
      add(:referredType, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:place_refs, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:role, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:instance_id, :uuid, null: false)
      add(:place_id, :text, null: false)
    end

    create table(:party_refs, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:role, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:instance_id, :uuid, null: false)
      add(:party_id, :text, null: false)
    end

    create table(:parties, primary_key: false) do
      add(:id, :text, null: false, primary_key: true)
      add(:href, :text)
      add(:name, :text)
      add(:type, :text, null: false, default: "PartyRef")
      add(:referredType, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:instances, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:relationships) do
      modify(
        :source_id,
        references(:instances,
          column: :id,
          name: "relationships_source_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      modify(
        :target_id,
        references(:instances,
          column: :id,
          name: "relationships_target_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(:relationships, [:source_id, :target_id],
             name: "relationships_unique_source_and_target_index"
           )

    alter table(:place_refs) do
      modify(
        :instance_id,
        references(:instances,
          column: :id,
          name: "place_refs_instance_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      modify(
        :place_id,
        references(:places,
          column: :id,
          name: "place_refs_place_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create unique_index(:place_refs, [:instance_id, :place_id],
             name: "place_refs_instance_place_uniqueness_index"
           )

    alter table(:party_refs) do
      modify(
        :instance_id,
        references(:instances,
          column: :id,
          name: "party_refs_instance_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      modify(
        :party_id,
        references(:parties,
          column: :id,
          name: "party_refs_party_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create unique_index(:party_refs, [:instance_id, :party_id],
             name: "party_refs_instance_party_uniqueness_index"
           )

    alter table(:instances) do
      add(:type, :text, null: false, default: "service")
      add(:name, :text)
      add(:service_operating_status, :text, default: "unknown")
      add(:process_statuses, {:array, :map})

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:started_at, :utc_datetime_usec)
      add(:stopped_at, :utc_datetime_usec)

      add(
        :specification_id,
        references(:specifications,
          column: :id,
          name: "instances_specification_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )

      add(:service_state, :text, null: false, default: "initial")
    end

    create unique_index(:instances, [:name, :specification_id],
             name: "instances_unique_name_per_specification_id_index"
           )

    create table(:features, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:name, :text, null: false)
      add(:isEnabled, :boolean, default: true)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :instance_id,
        references(:instances,
          column: :id,
          name: "features_instance_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )
    end

    create unique_index(:features, [:instance_id, :name],
             name: "features_instance_feature_uniqueness_index"
           )

    create table(:externalIdentifiers, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:type, :text)
      add(:external_id, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :instance_id,
        references(:instances,
          column: :id,
          name: "externalIdentifiers_instance_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )

      add(
        :owner_id,
        references(:parties,
          column: :id,
          name: "externalIdentifiers_owner_id_fkey",
          type: :text,
          prefix: "public"
        )
      )
    end

    create unique_index(:externalIdentifiers, [:instance_id, :type],
             name: "externalIdentifiers_instance_type_uniqueness_index"
           )

    create table(:characteristics, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:name, :text, null: false)
      add(:value, :binary)
      add(:type, :text, null: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :feature_id,
        references(:features,
          column: :id,
          name: "characteristics_feature_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      add(
        :instance_id,
        references(:instances,
          column: :id,
          name: "characteristics_instance_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      add(
        :relationship_id,
        references(:relationships,
          column: :id,
          name: "characteristics_relationship_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(:characteristics, [:feature_id, :name],
             name: "characteristics_feature_characteristic_uniqueness_index"
           )

    create unique_index(:characteristics, [:instance_id, :name],
             name: "characteristics_instance_characteristic_uniqueness_index"
           )

    create unique_index(:characteristics, [:relationship_id, :type, :name],
             name: "characteristics_relationship_characteristic_uniqueness_index"
           )
  end

  def down do
    drop_if_exists(
      unique_index(:characteristics, [:relationship_id, :type, :name],
        name: "characteristics_relationship_characteristic_uniqueness_index"
      )
    )

    drop_if_exists(
      unique_index(:characteristics, [:instance_id, :name],
        name: "characteristics_instance_characteristic_uniqueness_index"
      )
    )

    drop_if_exists(
      unique_index(:characteristics, [:feature_id, :name],
        name: "characteristics_feature_characteristic_uniqueness_index"
      )
    )

    drop(constraint(:characteristics, "characteristics_feature_id_fkey"))

    drop(constraint(:characteristics, "characteristics_instance_id_fkey"))

    drop(constraint(:characteristics, "characteristics_relationship_id_fkey"))

    drop(table(:characteristics))

    drop_if_exists(
      unique_index(:externalIdentifiers, [:instance_id, :type],
        name: "externalIdentifiers_instance_type_uniqueness_index"
      )
    )

    drop(constraint(:externalIdentifiers, "externalIdentifiers_instance_id_fkey"))

    drop(constraint(:externalIdentifiers, "externalIdentifiers_owner_id_fkey"))

    drop(table(:externalIdentifiers))

    drop_if_exists(
      unique_index(:features, [:instance_id, :name],
        name: "features_instance_feature_uniqueness_index"
      )
    )

    drop(constraint(:features, "features_instance_id_fkey"))

    drop(table(:features))

    drop_if_exists(
      unique_index(:instances, [:name, :specification_id],
        name: "instances_unique_name_per_specification_id_index"
      )
    )

    drop(constraint(:instances, "instances_specification_id_fkey"))

    alter table(:instances) do
      remove(:service_state)
      remove(:specification_id)
      remove(:stopped_at)
      remove(:started_at)
      remove(:updated_at)
      remove(:inserted_at)
      remove(:process_statuses)
      remove(:service_operating_status)
      remove(:name)
      remove(:type)
    end

    drop_if_exists(
      unique_index(:party_refs, [:instance_id, :party_id],
        name: "party_refs_instance_party_uniqueness_index"
      )
    )

    drop(constraint(:party_refs, "party_refs_instance_id_fkey"))

    drop(constraint(:party_refs, "party_refs_party_id_fkey"))

    alter table(:party_refs) do
      modify(:party_id, :text)
      modify(:instance_id, :uuid)
    end

    drop_if_exists(
      unique_index(:place_refs, [:instance_id, :place_id],
        name: "place_refs_instance_place_uniqueness_index"
      )
    )

    drop(constraint(:place_refs, "place_refs_instance_id_fkey"))

    drop(constraint(:place_refs, "place_refs_place_id_fkey"))

    alter table(:place_refs) do
      modify(:place_id, :text)
      modify(:instance_id, :uuid)
    end

    drop_if_exists(
      unique_index(:relationships, [:source_id, :target_id],
        name: "relationships_unique_source_and_target_index"
      )
    )

    drop(constraint(:relationships, "relationships_source_id_fkey"))

    drop(constraint(:relationships, "relationships_target_id_fkey"))

    alter table(:relationships) do
      modify(:target_id, :uuid)
      modify(:source_id, :uuid)
    end

    drop(table(:instances))

    drop(table(:parties))

    drop(table(:party_refs))

    drop(table(:place_refs))

    drop(table(:places))

    drop(table(:relationships))

    drop_if_exists(
      unique_index(:specifications, [:name, :major_version],
        name: "specifications_unique_major_version_per_name_index"
      )
    )

    drop(table(:specifications))
  end
end

defmodule Diffo.Provider.Characteristic do
  @moduledoc """
  Diffo - TMF Service and Resource Management with a difference
  Copyright Matt Beanland beanland@live.com.au

  Characteristic - Ash Resource for a TMF Characteristic
  """
  use Ash.Resource, otp_app: :diffo, domain: Diffo.Provider, data_layer: AshPostgres.DataLayer

  postgres do
    table "characteristics"
    repo Diffo.Repo
  end

  actions do
    defaults [:read, :destroy]

    create :create do
      description "creates a characteristic"
      accept [:feature_id, :instance_id, :relationship_id, :name, :value, :type]
    end

    read :find_by_name do
      description "finds characteristics by name"
      get? false
      argument :query, :ci_string do
        description "Return only characteristics with names including the given value."
      end
      filter expr(contains(name, ^arg(:query)))
    end

    read :list do
      description "lists all characteristics"
    end

    read :list_characteristics_by_related_id do
      description "lists characteristics by related id and type"
      argument :related_id, :uuid
      argument :type, :atom
      filter expr(((relationship_id == ^arg(:related_id)) or (instance_id == ^arg(:related_id)) or (feature_id == ^arg(:related_id))) and (type == ^arg(:type)))
    end

    update :update do
      description "updates the characteristic value"
      accept [:value]
    end
  end

  attributes do
    uuid_primary_key :id do
      description "a uuid4, unique to this characteristic, generated by default"
      public? false
    end

    attribute :name, :atom do
      description "the name of this characteristic"
      allow_nil? false
      public? true
    end

    attribute :value, :term do
      description "the value of the characteristic"
      allow_nil? true
      public? true
    end

    attribute :type, :atom do
      description "the type of the characteristic"
      allow_nil? false
      public? true
      constraints one_of: [:instance, :feature, :forward_relationship, :reverse_relationship]
    end

    create_timestamp :inserted_at

    update_timestamp :updated_at
  end

  identities do
    identity :feature_characteristic_uniqueness, [:feature_id, :name] do
      message "another feature characteristic exists with same name"
    end

    identity :instance_characteristic_uniqueness, [:instance_id, :name] do
      message "another instance characteristic exists with same name"
    end

    identity :relationship_characteristic_uniqueness, [:relationship_id, :type, :name] do
      message "another relationship characteristic exists with same name and direction"
    end
  end

  validations do
    validate present(:feature_id) do
      where one_of(:type, [:feature])
      message "feature_id must be supplied"
    end

    validate absent(:feature_id) do
      where negate(one_of(:type, [:feature]))
      message "feature_id must not be supplied"
    end

    validate present(:instance_id) do
      where one_of(:type, [:instance])
      message "instance_id must be supplied"
    end

    validate absent(:instance_id) do
      where negate(one_of(:type, [:instance]))
      message "instance_id must not be supplied"
    end

    validate present(:relationship_id) do
      where one_of(:type, [:forward_relationship, :reverse_relationship])
      message "relationship_id must be supplied"
    end

    validate absent(:relationship_id) do
      where negate(one_of(:type, [:forward_relationship, :reverse_relationship]))
      message "relationship_id must not be supplied"
    end
  end

  relationships do
    belongs_to :feature, Diffo.Provider.Feature do
      allow_nil? true
      public? true
    end

    belongs_to :instance, Diffo.Provider.Instance do
      allow_nil? true
      public? true
    end

    belongs_to :relationship, Diffo.Provider.Relationship do
      allow_nil? true
      public? true
    end
  end
end

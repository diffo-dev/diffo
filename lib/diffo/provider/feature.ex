defmodule Diffo.Provider.Feature do
  @moduledoc """
  Diffo - TMF Service and Resource Management with a difference
  Copyright Matt Beanland beanland@live.com.au

  Feature - Ash Resource for a TMF Feature
  """
  use Ash.Resource, otp_app: :diffo, domain: Diffo.Provider, data_layer: AshPostgres.DataLayer, extensions: [AshJason.Resource]

  postgres do
    table "features"
    repo Diffo.Repo
  end

  jason do
    pick [:name, :isEnabled, :featureCharacteristic]
    customize fn result, record ->
      feature_characteristics =
        result
        |> Map.get(:featureCharacteristic)
        |> Enum.sort({:asc, Diffo.Provider.Characteristic})
      result
      |> Map.delete(:featureCharacteristic)
      |> Diffo.Util.put_not_empty(:featureCharacteristic, feature_characteristics)
    end
    order [:name, :isEnabled, :featureCharacteristic]
  end

  actions do
    defaults [:read, :destroy]

    create :create do
      description "creates a feature"
      accept [:instance_id, :name, :isEnabled]
    end

    read :find_by_name do
      description "finds features by name"
      get? false
      argument :query, :ci_string do
        description "Return only features with names including the given value."
      end
      filter expr(contains(name, ^arg(:query)))
    end

    read :list do
      description "lists all features"
    end

    read :list_features_by_related_id do
      description "lists features by related id"
      argument :related_id, :uuid
      filter expr(instance_id == ^arg(:related_id))
    end

    update :update do
      description "updates the feature isEnabled"
      accept [:isEnabled]
    end
  end

  attributes do
    uuid_primary_key :id do
      description "a uuid4, unique to this feature, generated by default"
      public? false
    end

    attribute :name, :atom do
      description "the name of this feature"
      allow_nil? false
      public? true
    end

    attribute :isEnabled, :boolean do
      description "indicates whether the feature is enabled"
      public? true
      default true
    end

    create_timestamp :inserted_at

    update_timestamp :updated_at
  end

  identities do
    identity :instance_feature_uniqueness, [:instance_id, :name] do
      message "another instance feature exists with same name"
    end
  end

  relationships do
    belongs_to :instance, Diffo.Provider.Instance do
      allow_nil? false
      public? true
    end

    has_many :featureCharacteristic, Diffo.Provider.Characteristic do
      public? true
    end
  end

  @doc """
  Compares two feature, by ascending name
  ## Examples
    iex> Diffo.Provider.Feature.compare(%{name: "a"}, %{name: "a"})
    :eq
    iex> Diffo.Provider.Feature.compare(%{name: "b"}, %{name: "a"})
    :gt
    iex> Diffo.Provider.Feature.compare(%{name: "a"}, %{name: "b"})
    :lt

  """
  def compare(%{name: name0}, %{name: name1}), do: Diffo.Util.compare(name0, name1)
end

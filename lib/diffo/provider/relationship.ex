defmodule Diffo.Provider.Relationship do
  @moduledoc """
  Diffo - TMF Service and Resource Management with a difference
  Copyright Matt Beanland beanland@live.com.au

  Relationship - Ash Resource for a TMF Service or Resource Relationship
  """
  use Ash.Resource, otp_app: :diffo, domain: Diffo.Provider, data_layer: AshPostgres.DataLayer

  postgres do
    table "relationships"
    repo Diffo.Repo
  end

  actions do
    defaults [:read, :destroy]

    create :create do
      description "creates a relationship between a source and target instance"
      accept [:source_id, :target_id, :type, :reverse_type, :alias]
    end

    read :list do
      description "lists all relationships"
    end

    read :find_by_id do
      description "finds relationships by source_id or target_id"
    end

    update :alias do
      description "updates the source's alias for the target"
      accept [:alias]
    end

    update :type do
      description "updates the type, the type of the relationship from the source to the target"
      accept [:type]
    end

    update :reverse_type do
      description "updates the reverse_type, the type of the relationship to the source from the target"
      accept [:reverse_type]
    end
  end

  attributes do
    uuid_primary_key :id do
      description "a uuid4, unique to this instance, generated by default"
      public? false
    end

    attribute :alias, :string do
      description "the alias of this relationship"
      allow_nil? true
      public? true
      constraints match: ~r/^[a-zA-Z0-9\s._-]+$/
    end

    attribute :type, :atom do
      description "the type of the relationship from the source to the target"
      allow_nil? true
      public? true
    end

    attribute :reverse_type, :atom do
      description "the type of the reverse relationship (to the source from the target)"
      allow_nil? true
      public? true
    end

    create_timestamp :inserted_at

    update_timestamp :updated_at
  end

  relationships do
    belongs_to :source, Diffo.Provider.Instance do
      allow_nil? false
    end

    belongs_to :target, Diffo.Provider.Instance do
      allow_nil? false
    end
  end

  validations do
    validate {Diffo.Validations.IsUuid4OrNil, attribute: :source_id}, on: :create
    validate {Diffo.Validations.IsUuid4OrNil, attribute: :target_id}, on: :create
  end

  calculations do

    calculate :source_tmf_version, :string, expr(source.tmf_version) do
      description "the TMF version of the source instance"
    end

    calculate :source_type, :atom, expr(source.type) do
      description "the type of the source instance"
    end

    calculate :target_type, :atom, expr(target.type) do
      description "the type of the target instance"
    end

    calculate :source_href, :string, expr(source.href) do
      description "the href of the source instance"
    end

    calculate :target_href, :string, expr(target.href) do
      description "the href of the target instance"
    end
  end

  identities do
    identity :unique_source_and_target, [:source_id, :target_id]
  end

  @doc """
  Derives the instance relationship name from the instance type
  ## Examples
    iex> Diffo.Provider.Relationship.derive_relationship_name(:service)
    :serviceRelationship

    iex> Diffo.Provider.Relationship.derive_relationship_name(:resource)
    :resourceRelationship

  """
  def derive_relationship_name(instance_type) do
    case instance_type do
      :service -> :serviceRelationship
      :resource -> :resourceRelationship
    end
  end

    @doc """
  Derives the instance relationship characteristic name from the instance type
  ## Examples
    iex> Diffo.Provider.Relationship.derive_relationship_characteristic_name(:service)
    :serviceRelationshipCharacteristic

    iex> Diffo.Provider.Relationship.derive_relationship_characteristic_name(:resource)
    :resourceRelationshipCharacteristic

  """
  def derive_relationship_characteristic_name(instance_type) do
    case instance_type do
      :service -> :serviceRelationshipCharacteristic
      :resource -> :resourceRelationshipCharacteristic
    end
  end
end

defmodule Diffo.Provider.Relationship do
  @moduledoc """
  Diffo - TMF Service and Resource Management with a difference
  Copyright Matt Beanland beanland@live.com.au

  Relationship - Ash Resource for a TMF Service or Resource Relationship
  """
  use Ash.Resource, otp_app: :diffo, domain: Diffo.Provider, data_layer: AshPostgres.DataLayer, extensions: [AshJason.Resource]

  postgres do
    table "relationships"
    repo Diffo.Repo
  end

  jason do
    pick [:target_href, :type, :characteristic, :target_type]
    customize fn result, _record ->
      relationship_characteristic_name = Diffo.Provider.Relationship.derive_relationship_characteristic_name(Map.get(result, :target_type))
      target_type = Map.get(result, :target_type)
      href = Map.get(result, :target_href)
      id = Diffo.Uuid.trailing_uuid4(href)
      characteristics = Map.get(result, :characteristic)
      result
        |> Map.put(target_type, %{id: id, href: href})
        |> Diffo.Util.put_not_empty(relationship_characteristic_name, characteristics)
    end
    order [:type, :service, :resource, :serviceRelationshipCharacteristic, :resourceRelationshipCharacteristic]
  end

  actions do
    defaults [:read, :destroy]

    create :create do
      description "creates a relationship between a source and target instance"
      accept [:source_id, :target_id, :type, :alias]
    end

    read :list do
      description "lists all relationships"
    end

    read :list_service_relationships_from do
      description "lists service relationships from the instance"
      argument :instance_id, :uuid
      filter expr(source_id == ^arg(:instance_id) and target_type == :service)
    end

    read :list_resource_relationships_from do
      description "lists resource relationships from the instance"
      argument :instance_id, :uuid
      filter expr(source_id == ^arg(:instance_id) and target_type == :resource)
    end

    update :update do
      description "updates the relationship"
      accept [:alias, :type]
    end
  end

  attributes do
    uuid_primary_key :id do
      description "a uuid4, unique to this instance, generated by default"
      public? false
    end

    attribute :alias, :atom do
      description "the alias of this relationship"
      allow_nil? true
      public? true
    end

    attribute :type, :atom do
      description "the type of the relationship from the source to the target"
      allow_nil? true
      public? true
    end

    create_timestamp :inserted_at

    update_timestamp :updated_at
  end

  relationships do
    belongs_to :source, Diffo.Provider.Instance do
      allow_nil? false
      public? true
    end

    belongs_to :target, Diffo.Provider.Instance do
      allow_nil? false
      public? true
    end

    has_many :characteristic, Diffo.Provider.Characteristic do
      public? true
    end
  end

  validations do
    validate {Diffo.Validations.IsUuid4OrNil, attribute: :source_id}, on: :create
    validate {Diffo.Validations.IsUuid4OrNil, attribute: :target_id}, on: :create
  end

  calculations do

    calculate :source_tmf_version, :string, expr(source.tmf_version) do
      description "the TMF version of the source instance"
    end

    calculate :source_type, :atom, expr(source.type) do
      description "the type of the source instance"
    end

    calculate :target_type, :atom, expr(target.type) do
      description "the type of the target instance"
    end

    calculate :source_href, :string, expr(source.href) do
      description "the href of the source instance"
    end

    calculate :target_href, :string, expr(target.href) do
      description "the href of the target instance"
    end
  end

  identities do
    identity :unique_source_and_target, [:source_id, :target_id]
  end

  @doc """
  Derives the instance relationship name from the instance type
  ## Examples
    iex> Diffo.Provider.Relationship.derive_relationship_name(:service)
    :serviceRelationship

    iex> Diffo.Provider.Relationship.derive_relationship_name(:resource)
    :resourceRelationship

  """
  def derive_relationship_name(instance_type) do
    case instance_type do
      :service -> :serviceRelationship
      :resource -> :resourceRelationship
    end
  end

  @doc """
  Derives the instance relationship characteristic name from the instance type
  ## Examples
    iex> Diffo.Provider.Relationship.derive_relationship_characteristic_name(:service)
    :serviceRelationshipCharacteristic

    iex> Diffo.Provider.Relationship.derive_relationship_characteristic_name(:resource)
    :resourceRelationshipCharacteristic

  """
  def derive_relationship_characteristic_name(instance_type) do
    case instance_type do
      :service -> :serviceRelationshipCharacteristic
      :resource -> :resourceRelationshipCharacteristic
    end
  end
end

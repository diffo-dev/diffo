defmodule Diffo.Provider.Relationship do
  @moduledoc """
  Diffo - TMF Service and Resource Management with a difference
  Copyright Matt Beanland beanland@live.com.au

  Relationship - Ash Resource for a TMF Service or Resource Relationship
  """
  use Ash.Resource,
    otp_app: :diffo,
    domain: Diffo.Provider,
    data_layer: AshNeo4j.DataLayer,
    extensions: [AshOutstanding.Resource, AshJason.Resource]

  neo4j do
    label(:Relationship)

    relate([
      {:source, :RELATES_HOW, :incoming},
      {:target, :RELATED_HOW, :outgoing},
      {:characteristics, :DEFINES, :incoming}
    ])

    translate(id: :uuid)
  end

  jason do
    pick([:target_type, :type, :characteristics, :target_type, :target_id, :target_href])

    customize(fn result, _record ->
      type = Diffo.Util.get(result, :target_type)
      id = Diffo.Util.get(result, :target_id)
      href = Diffo.Util.get(result, :target_href)
      reference = %{id: id, href: href}

      relationship_characteristic_list_name =
        Diffo.Provider.Relationship.derive_relationship_characteristic_list_name(type)

      result =
        result
        |> Diffo.Util.set(type, reference)
        |> Diffo.Util.suppress_rename(:characteristics, relationship_characteristic_list_name)
    end)

    order([
      :type,
      :service,
      :resource,
      :serviceRelationshipCharacteristic,
      :resourceRelationshipCharacteristic
    ])
  end

  outstanding do
    expect([:type, :target_type, :target_id, :target_href, :characteristics])
  end

  attributes do
    uuid_primary_key :id do
      description "a uuid4, unique to this instance, generated by default"
      public? true
    end

    attribute :alias, :atom do
      description "the alias of this relationship, used for supporting service or resource"
      allow_nil? true
      public? true
    end

    attribute :type, :atom do
      description "the type of the relationship from the source to the target"
      allow_nil? false
      public? true
    end

    create_timestamp :inserted_at

    update_timestamp :updated_at
  end

  relationships do
    belongs_to :source, Diffo.Provider.Instance do
      allow_nil? false
      public? true
    end

    belongs_to :target, Diffo.Provider.Instance do
      allow_nil? false
      public? true
    end

    has_many :characteristics, Diffo.Provider.Characteristic do
      public? true
    end
  end

  actions do
    defaults [:read, :destroy]

    create :create do
      description "creates a relationship between a source and target instance"
      accept [:source_id, :target_id, :type, :alias]

      argument :source_id, :uuid
      argument :target_id, :string
      argument :characteristics, {:array, :uuid}

      change manage_relationship(:source_id, :source, type: :append)
      change manage_relationship(:target_id, :target, type: :append)
      change manage_relationship(:characteristics, type: :append)
      change load [:target_type, :target_id, :target_href]
    end

    read :list do
      description "lists all relationships"
    end

    read :list_service_relationships_from do
      description "lists service relationships from the instance"
      argument :instance_id, :uuid
      filter expr(source_id == ^arg(:instance_id) and target.type == :service)
    end

    read :list_resource_relationships_from do
      description "lists resource relationships from the instance"
      argument :instance_id, :uuid
      filter expr(source_id == ^arg(:instance_id) and target.type == :resource)
    end

    update :update do
      description "updates the relationship type and/or alias"
      accept [:alias, :type]
    end

    update :relate_characteristics do
      description "relates characteristics to the relationship"
      argument :characteristics, {:array, :uuid}
      change manage_relationship(:characteristics, type: :append)
    end

    update :unrelate_characteristics do
      description "unrelates characteristic from the relationship"
      argument :characteristics, {:array, :uuid}
      change manage_relationship(:characteristics, type: :remove)
    end
  end

  identities do
    identity :unique_source_and_target, [:source_id, :target_id]
  end

  preparations do
    prepare build(
              load: [:source, :target, :source_type, :source_href, :target_type, :target_href, :characteristics],
              sort: [alias: :asc, type: :asc]
            )
  end

  validations do
    validate {Diffo.Validations.IsUuid4OrNil, attribute: :source_id}, on: :create
    validate {Diffo.Validations.IsUuid4OrNil, attribute: :target_id}, on: :create

    validate absent(:alias) do
      on [:create, :update]
      where [one_of(:source_type, [:resource]), one_of(:target_type, [:service])]
      message "a resource cannot have a supporting service"
    end

    #validate {Diffo.Validations.RelatedResourcesDifferent,
    #          relationship: :characteristic, attribute: :name},
    #        on: :update
  end

  calculations do
    calculate :source_tmf_version, :string, expr(source.tmf_version) do
      description "the TMF version of the related source instance"
    end

    calculate :source_type, :atom, expr(source.type) do
      description "the type of the related source instance"
    end

    calculate :source_href, :string, expr(source.href) do
      description "the href of the related source instance"
    end

    calculate :target_type, :atom, expr(target.type) do
      description "the type of the related target instance"
    end

    calculate :target_href, :string, expr(target.href) do
      description "the href of the related target instance"
    end
  end

  @doc """
  Derives the instance relationship name from the instance type
  ## Examples
    iex> Diffo.Provider.Relationship.derive_relationship_name(:service)
    :serviceRelationship

    iex> Diffo.Provider.Relationship.derive_relationship_name(:resource)
    :resourceRelationship

  """
  def derive_relationship_name(instance_type) do
    case instance_type do
      :service -> :serviceRelationship
      :resource -> :resourceRelationship
      _ -> nil
    end
  end

  @doc """
  Derives the instance relationship characteristic list name from the instance type
  ## Examples
    iex> Diffo.Provider.Relationship.derive_relationship_characteristic_list_name(:service)
    :serviceRelationshipCharacteristic

    iex> Diffo.Provider.Relationship.derive_relationship_characteristic_list_name(:resource)
    :resourceRelationshipCharacteristic

  """
  def derive_relationship_characteristic_list_name(instance_type) do
    case instance_type do
      :service -> :serviceRelationshipCharacteristic
      :resource -> :resourceRelationshipCharacteristic
      _ -> nil
    end
  end

  @doc """
  Compares two relationship, by ascending target_href
  ## Examples
    iex> Diffo.Provider.Relationship.compare(%{target_href: "a"}, %{target_href: "a"})
    :eq
    iex> Diffo.Provider.Relationship.compare(%{target_href: "b"}, %{target_href: "a"})
    :gt
    iex> Diffo.Provider.Relationship.compare(%{target_href: "a"}, %{target_href: "b"})
    :lt

  """
  def compare(%{target_href: href0}, %{target_href: href1}), do: Diffo.Util.compare(href0, href1)
end

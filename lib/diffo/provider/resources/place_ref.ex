defmodule Diffo.Provider.PlaceRef do
  @moduledoc """
  Diffo - TMF Service and Resource Management with a difference
  Copyright Matt Beanland beanland@live.com.au

  PlaceRef - Ash Resource for a TMF PlaceRef
  """
  use Ash.Resource,
    otp_app: :diffo,
    domain: Diffo.Provider,
    data_layer: AshNeo4j.DataLayer,
    extensions: [AshOutstanding.Resource, AshJason.Resource]

  neo4j do
    label(:PlaceRef)
    relate [
      {:instance, :RELATES_HOW, :incoming},
      {:place, :RELATED_HOW, :outgoing}
    ]
    translate(id: :uuid)
  end

  jason do
    pick([:place_id, :href, :name, :role, :referredType, :type])
    rename(place_id: :id, referredType: "@referredType", type: "@type")
  end

  outstanding do
    expect([:id, :name, :role, :referredType, :type])
  end

  attributes do
    uuid_primary_key :id do
      description "a uuid4, unique to this place ref, generated by default"
      public? false
    end

    attribute :role, :atom do
      description "the role of the place to the instance"
      allow_nil? true
      public? true
    end

    create_timestamp :inserted_at

    update_timestamp :updated_at
  end

  relationships do
    belongs_to :instance, Diffo.Provider.Instance do
      allow_nil? false
      public? true
    end

    belongs_to :place, Diffo.Provider.Place do
      attribute_type :string
      allow_nil? false
      public? true
    end
  end

  actions do
    defaults [:read, :destroy]

    create :create do
      description "creates a place ref"
      accept [:instance_id, :role, :place_id]
      change load [:href, :name, :referredType, :type]
      touches_resources [Diffo.Provider.Instance, Diffo.Provider.Place]
    end

    read :list do
      description "lists all place refs"
    end

    read :list_place_refs_by_instance_id do
      description "lists place refs by instance id"
      argument :instance_id, :uuid
      filter expr(instance_id == ^arg(:instance_id))
    end

    read :list_place_refs_by_place_id do
      description "lists place refs by place id"
      argument :place_id, :string
      filter expr(place_id == ^arg(:place_id))
    end

    read :find_by_place_id do
      description "finds place refs by place id"
      get? false

      argument :query, :ci_string do
        description "Return only place refs with place_ids including the given value."
      end

      filter expr(contains(place_id, ^arg(:query)))
    end

    update :update do
      description "updates the place ref role"
      accept [:role]
    end
  end

  identities do
    identity :instance_place_uniqueness, [:instance_id, :place_id] do
      message "another place ref exists relating the same instance and place"
    end
  end

  preparations do
    prepare build(load: [:href, :name, :referredType, :type], sort: [place_id: :asc])
  end

  calculations do
    calculate :href, :string, expr(place.href) do
      description "the href of the related place instance"
    end

    calculate :name, :string, expr(place.name) do
      description "the name of the related place instance"
    end

    calculate :referredType, :string, expr(place.referredType) do
      description "the referredType of the related place instance"
    end

    calculate :type, :string, expr(place.type) do
      description "the type of the related place instance"
    end
  end

  @doc """
  Compares two place ref, by ascending place_id
  ## Examples
    iex> Diffo.Provider.PlaceRef.compare(%{place_id: "a"}, %{place_id: "a"})
    :eq
    iex> Diffo.Provider.PlaceRef.compare(%{place_id: "b"}, %{place_id: "a"})
    :gt
    iex> Diffo.Provider.PlaceRef.compare(%{place_id: "a"}, %{place_id: "b"})
    :lt

  """
  def compare(%{place_id: place_id0}, %{place_id: place_id1}),
    do: Diffo.Util.compare(place_id0, place_id1)
end

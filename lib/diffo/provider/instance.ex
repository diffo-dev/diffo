defmodule Diffo.Provider.Instance do
  @moduledoc """
  Diffo - TMF Service and Resource Management with a difference
  Copyright Matt Beanland beanland@live.com.au

  Instance - Ash Resource for a TMF Service or Resource Instance
  """
  use Ash.Resource, otp_app: :diffo, domain: Diffo.Provider, data_layer: AshPostgres.DataLayer

  postgres do
    table "instances"
    repo Diffo.Repo
  end

  actions do
    create :create do
      description "creates a new instance of a service or resource according by specification id"
      accept([:specification_id, :name, :type])
    end

    read :read do
      description "reads a service or resource instance by id"
      primary? true
    end

    read :find do
      description "finds service or resource instances by name"
      get? false
      argument :query, :ci_string do
        description "Return only instances with names including the given value."
      end
      filter expr(contains(name, ^arg(:query)))
    end

    read :list do
      description "list service or resource instances by specification id"
      get? false
      argument :query, :string do
        description "Return only instances specified by the given value."
      end
      prepare build(sort: [name: :asc])
      filter expr(match(specification_id, ^arg(:query)))
    end

    update :name do
      description "updates the name"
      accept ([:name])
    end

    update :specify do
      description "specifies the instance by specification id"
      accept ([:specification_id])
    end

    update :cancel do
      description "cancels a service instance"
      change set_attribute(:service_state, :cancelled)
      change set_attribute(:service_operating_status, :unknown)
    end

    update :activate do
      description "activates a service instance"
      change set_attribute(:service_state, :active)
      change set_attribute(:service_operating_status, :started)
    end

    update :terminate do
      description "terminates a service instance"
      change set_attribute(:service_state, :terminate)
      change set_attribute(:service_operating_status, :stopped)

    end

    update :transition do
      description "transition service state and/or operating status"
      accept [:service_state, :service_operating_status]
    end
  end

  attributes do
    uuid_primary_key :id do
      description(
        "a uuid4, unique to this instance, generated by default"
      )
      public?(true)
    end

    attribute :type, :atom do
      description(
        "the type of the instance, either service or resource"
      )
      allow_nil?(false)
      default (:service)
      public?(true)
      constraints(one_of: [:service, :resource])
    end

    attribute :name, :string do
      description(
        "the name of this service or resource instance"
      )
      allow_nil?(true)
      public?(true)
      constraints(match: ~r/^[a-z][a-zA-Z0-9]*$/)
    end

    attribute :service_state, :atom do
      description("the service state, if this instance is a service")
      allow_nil?(true)
      public?(true)
      constraints(one_of: [:initial, :cancelled, :reserved, :designed, :feasibilityChecked, :inactive, :active, :suspended, :terminated])
    end

    attribute :service_operating_status, :atom do
      description("the service operating status, if this instance is a service")
      allow_nil?(true)
      public?(true)
      constraints(one_of: [:pending, :configured, :starting, :running, :degraded, :failed, :limited, :stopping, :stopped, :unknown])
    end

    create_timestamp(:inserted_at)

    update_timestamp(:updated_at)
  end

  relationships do
    belongs_to :specification, Diffo.Provider.Specification do
      allow_nil? false
    end
  end

  validations do
    validate({Diffo.Validations.IsUuid4OrNil, attribute: :specification_id}, on: :create)
    validate({Diffo.Validations.IsTransitionValid, attribute: :service_state, transition_graph: nil}, on: :update)
    # TODO this isn't working as specified_instance_type is not loaded
    #validate(confirm(:type, :specified_instance_type), on: [:create, :update])
  end

  calculations do
    calculate :category, :string, expr(specification.category) do
      description "indicates the category of the instance"
    end

    calculate :description, :string, expr(specification.description) do
      description "describes the service or resource specification"
    end

    calculate :tmf_version, :string, expr(specification.tmf_version) do
      description "indicates the TMF version of the service or resource"
    end

    calculate :specification_name, :string, expr(specification.name) do
      description "names the service or resource specification"
    end

    calculate :specified_instance_type, :string, expr(specification.instance_type) do
      description "the instance type specified by the specification"
    end

    calculate :href, :string, expr(type <> "InventoryManagement/v" <> tmf_version <> "/" <> type <> "/" <> specification_name <> "/" <> id) do
      description "the inventory href of the service or resource instance"
    end
  end

  identities do
    identity :unique_name_per_specification_id, [:name, :specification_id]
  end

  @doc """
  Derives the type prefix from the specification type
  ## Examples
    iex> Diffo.Provider.Instance.derive_type(:serviceSpecification)
    :service

    iex> Diffo.Provider.Instance.derive_type(:resourceSpecification)
    :resource

  """
  def derive_type(specification_type) do
    case specification_type do
      :serviceSpecification -> :service
      :resourceSpecification -> :resource
    end
  end
end

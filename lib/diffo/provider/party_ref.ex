defmodule Diffo.Provider.PartyRef do
  @moduledoc """
  Diffo - TMF Service and Resource Management with a difference
  Copyright Matt Beanland beanland@live.com.au

  PartyRef - Ash Resource for a TMF PartyRef
  """
  use Ash.Resource, otp_app: :diffo, domain: Diffo.Provider, data_layer: AshPostgres.DataLayer, extensions: [AshJason.Resource]

  postgres do
    table "party_refs"
    repo Diffo.Repo
  end

  jason do
    pick [:role, :party]
    customize fn result, record ->
      opts = [lazy?: true]
      loaded_record =
        record
        |> Ash.load!([:party], opts)
      result =
        result
        |> Diffo.Util.ensure_not_nil(:id,  loaded_record.party.id)
        |> Diffo.Util.ensure_not_nil(:href, loaded_record.party.href)
        |> Diffo.Util.ensure_not_nil(:name, loaded_record.party.name)
        |> Diffo.Util.ensure_not_nil(:at_referredType, loaded_record.party.referredType)
        |> Diffo.Util.ensure_not_nil(:at_type, loaded_record.party.type)
    end
    order [:id, :href, :name, :role, :at_referredType, :at_type]
    rename %{at_referredType: "@referredType", at_type: "@type"}
  end

  actions do
    defaults [:read, :destroy]

    create :create do
      description "creates a party ref"
      accept [:instance_id, :role, :party_id]
    end

    read :list do
      description "lists all party refs"
    end

    read :list_party_refs_by_instance_id do
      description "lists party refs by instance id"
      argument :instance_id, :uuid
      filter expr(instance_id == ^arg(:instance_id))
    end

    read :list_party_refs_by_party_id do
      description "lists party refs by party id"
      argument :party_id, :string
      filter expr(party_id == ^arg(:party_id))
    end

    read :find_by_party_id do
      description "finds party refs by party id"
      get? false
      argument :query, :ci_string do
        description "Return only party refs with party_ids including the given value."
      end
      filter expr(contains(party_id, ^arg(:query)))
    end

    update :update do
      description "updates the party ref role"
      accept [:role]
    end
  end

  attributes do
    uuid_primary_key :id do
      description "a uuid4, unique to this party ref, generated by default"
      public? false
    end

    attribute :role, :atom do
      description "the role of the party to the instance"
      allow_nil? true
      public? true
    end

    create_timestamp :inserted_at

    update_timestamp :updated_at
  end

  identities do
    identity :instance_party_uniqueness, [:instance_id, :party_id] do
      message "another party ref exists"
    end
  end

  relationships do
    belongs_to :instance, Diffo.Provider.Instance do
      allow_nil? false
      public? true
    end

    belongs_to :party, Diffo.Provider.Party do
      attribute_type :string
      allow_nil? false
      public? true
    end
  end

  preparations do
    prepare build(sort: [party_id: :asc])
  end

  @doc """
  Compares two party ref, by ascending party_id
  ## Examples
    iex> Diffo.Provider.PartyRef.compare(%{party_id: "a"}, %{party_id: "a"})
    :eq
    iex> Diffo.Provider.PartyRef.compare(%{party_id: "b"}, %{party_id: "a"})
    :gt
    iex> Diffo.Provider.PartyRef.compare(%{party_id: "a"}, %{party_id: "b"})
    :lt

  """
  def compare(%{party_id: party_id0}, %{party_id: party_id1}), do: Diffo.Util.compare(party_id0, party_id1)
end

defmodule Diffo.Provider.Specification do
  @moduledoc """
  Diffo - TMF Service and Resource Management with a difference
  Copyright Matt Beanland beanland@live.com.au

  Specification - Ash Resource for a TMF Service or Resource Specification
  """
  use Ash.Resource, otp_app: :diffo, domain: Diffo.Provider, data_layer: AshPostgres.DataLayer

  postgres do
    table "specifications"
    repo Diffo.Repo
  end

  actions do
    create :create do
      description "creates a major version of a named serviceSpecification or resourceSpecification"
      accept([:type, :name, :major_version, :id, :description])
    end

    read :read do
      description "reads a serviceSpecification or resourceSpecification by id"
      primary? true
    end

    read :find do
      description "finds specifications by name"
      get? false
      argument :name, :string, allow_nil?: false
      filter expr(contains(name, ^arg(:name)))
    end

    read :get_latest do
      description "gets the serviceSpecification or resourceSpecification by name with highest major version"
      get? true
      argument :name, :string, allow_nil?: false
      filter expr(name, ^arg(:name))
      sort major_version: :desc
      limit 1
    end

    update :describe do
      require_atomic? false
      description "updates the description"
      accept ([:description])
    end

    update :next_minor do
      require_atomic? false
      description "increments the minor version and resets the patch version"
      change atomic_update(:minor_version, expr(minor_version + 1))
      change set_attribute(:patch_version, 0)
    end

    update :next_patch do
      require_atomic? false
      description "increments the patch version"
      change atomic_update(:patch_version, expr(patch_version + 1))
    end
  end

  attributes do
    attribute :type, :atom do
      description("indicates whether a serviceSpecification or resourceSpecification, defaults serviceSpecification")
      allow_nil?(false)
      public?(false)
      default(:serviceSpecification)
      constraints(one_of: [:serviceSpecification, :resourceSpecification])
    end

    attribute :name, :string do
      description(
        "the generic name of the service or resource specified by any version of this specification, e.g. adslAccess"
      )
      allow_nil?(false)
      public?(true)
      constraints(match: ~r/^[a-z][a-zA-Z0-9]*$/)
    end

    attribute :major_version, :integer do
      description("the major version, defaults 1")
      allow_nil?(false)
      public?(false)
      default(1)
      constraints(min: 0)
    end

    attribute :minor_version, :integer do
      description("the minor version, defaults 0")
      allow_nil?(false)
      public?(false)
      default(0)
      constraints(min: 0)
    end

    attribute :patch_version, :integer do
      description("the patch version, defaults 0")
      allow_nil?(false)
      public?(false)
      default(0)
      constraints(min: 0)
    end

    attribute :id, :uuid do
      description(
        "a uuid4, unique to a major version of this specification and common across all environments, generated by default"
      )
      primary_key?(true)
      allow_nil?(false)
      public?(true)
      default (&Ash.UUID.generate/0)
    end

    attribute :description, :string do
      description(
        "a description of the service or resoruce specified by a major version of this specification"
      )

      allow_nil?(true)
      public?(true)
    end

    attribute :tmf_version, :integer do
      description(
        "the TMF version of the specified service or resource, e.g. v4"
      )
      allow_nil?(false)
      public?(false)
      default(4)
      constraints(min: 1)
    end

    validations do
      validate({Diffo.Validations.IsUuid4OrNil, attribute: :id})
    end

    calculations do
      calculate :version, :string, expr("v" <> major_version <> "." <> minor_version <> "." <> patch_version)

      calculate(:href, :string, expr(
        cond do
          type == :serviceSpecification -> "serviceCatalogManagement/v" <> tmf_version <> "/" <> type <> "/" <> id
          type == :resourceSpecification -> "resourceCatalogManagement/v" <> tmf_version <> "/" <> type <> "/" <> id
        end
       ))
    end

    preparations do
      prepare build(sort: [major_version: :asc])
    end

    identities do
      identity :unique_major_version_per_name, [:name, :major_version]
    end

    create_timestamp(:inserted_at)
    update_timestamp(:updated_at)
  end


  @doc """
  Derives the catalog prefix from the type
  ## Examples
    iex> Diffo.Provider.Specification.catalog(:serviceSpecification)
    :serviceCatalogManagement

    iex> Diffo.Provider.Specification.catalog(:resourceSpecification)
    :resourceCatalogManagement

  """
  def catalog(type) do
    case type do
      :serviceSpecification -> :serviceCatalogManagement
      :resourceSpecification -> :resourceCatalogManagement
    end
  end
end

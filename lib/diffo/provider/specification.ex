defmodule Diffo.Provider.Specification do
  use Ash.Resource, otp_app: :diffo, domain: Diffo.Provider, data_layer: AshPostgres.DataLayer

  postgres do
    table "specifications"
    repo Diffo.Repo
  end

  actions do
    create :create do
      description "creates a major version of a named serviceSpecification or resourceSpecification"
      accept([:type, :name, :major_version, :id, :href, :description, :version])
    end
  end

  attributes do
    attribute :type, :atom do
      description("indicates whether a serviceSpecification or resourceSpecification, defaults serviceSpecification")
      allow_nil?(false)
      public?(false)
      default(:serviceSpecification)
      constraints(one_of: [:serviceSpecification, :resourceSpecification])
    end

    attribute :name, :string do
      description(
        "the generic name of the service or resource specified by any version of this specification, e.g. adslAccess"
      )
      allow_nil?(false)
      public?(true)
      constraints(match: ~r/^[a-z]+((\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?/)
    end

    attribute :major_version, :integer do
      description("the major version, must match the major version of the version string, defaults 1")
      allow_nil?(false)
      public?(false)
      default(1)
      constraints(min: 0)
    end

    attribute :id, :uuid do
      description(
        "a uuid4, unique to a major version of this specification and common across all environments, generated by default"
      )
      primary_key?(true)
      allow_nil?(false)
      public?(true)
      default (&Ash.UUID.generate/0)
    end

    attribute :description, :string do
      description(
        "a description of the service or resoruce specified by a major version of this specification"
      )

      allow_nil?(true)
      public?(true)
    end

    attribute :version, :string do
      description(
        "a version string, where the minor and trivial version are runtime, defaults v1.0.0"
      )
      allow_nil?(true)
      public?(true)
      default ("v1.0.0")
    end

    attribute :href, :string do
      description(
        "the URL for this instance of the specification, e.g. /serviceCatalogManagement/v4/serviceSpecification/{uuid}"
      )

      allow_nil?(true)
      public?(true)
    end

    validations do
      validate({Diffo.Validations.IsUuid4OrNil, attribute: :id})
    end

    create_timestamp(:inserted_at)
    update_timestamp(:updated_at)
  end
end
